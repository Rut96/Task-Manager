{"ast":null,"code":"var _jsxFileName = \"/Users/rutli/Desktop/PetProjects/Task Manager/Frontend/src/Components/PagesArea/Home/Home.tsx\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n// import { BoardModel } from \"../../../Models/BoardModel\";\n// import { boardService } from \"../../../Services/BoardService\";\n// import { Grid, Layout, Plus, MoreHorizontal } from \"lucide-react\";\n// import \"./Home.css\";\n\n// // Predefined color palette for columns\n// const colorPalette = [\n//     '#60A5FA', // Blue\n//     '#F59E0B', // Orange\n//     '#10B981', // Green\n//     '#8B5CF6', // Purple\n//     '#EC4899', // Pink\n//     '#14B8A6', // Teal\n//     '#F97316', // Dark Orange\n//     '#6366F1', // Indigo\n//     '#06B6D4', // Cyan\n//     '#84CC16'  // Lime\n// ];\n\n// // Function to get a color based on column index\n// function getColumnColor(index: number): string {\n//     // Use modulo to cycle through colors if we have more columns than colors\n//     return colorPalette[index % colorPalette.length];\n// }\n\n// export function Home(): JSX.Element {\n//     const [boards, setBoards] = useState<BoardModel[]>([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState<string | null>(null);\n//     const [selectedBoardId, setSelectedBoardId] = useState<string | null>(null);\n//     const [selectedBoard, setSelectedBoard] = useState<BoardModel | null>(null);\n\n//     useEffect(() => {\n//         (async () => {\n//             try {\n//                 setLoading(true);\n//                 const fetchedBoards = await boardService.getAllBoards();\n//                 setBoards(fetchedBoards);\n//                 if (fetchedBoards.length > 0) {\n//                     setSelectedBoardId(fetchedBoards[0]._id);\n//                     setSelectedBoard(fetchedBoards[0]);\n//                 }\n//                 setError(null);\n//             } catch (err) {\n//                 setError(\"Failed to fetch boards. Please try again later.\");\n//                 console.error(\"Error fetching boards:\", err);\n//             } finally {\n//                 setLoading(false);\n//             }\n//         })();\n//     }, []);\n\n//     useEffect(() => {\n//         const board = boards.find(b => b._id === selectedBoardId);\n//         setSelectedBoard(board || null);\n//     }, [selectedBoardId, boards]);\n\n//     if (loading) {\n//         return (\n//             <div className=\"loading-container\">\n//                 <div className=\"loading-spinner\"></div>\n//                 <span>Loading your boards...</span>\n//             </div>\n//         );\n//     }\n\n//     if (error) {\n//         return (\n//             <div className=\"error-message\">\n//                 <span>{error}</span>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"Home\">\n//             <div className=\"boards-nav\">\n//                 <div className=\"nav-left\">\n//                     <h1 className=\"title\">My Boards</h1>\n//                 </div>\n\n//                 <div className=\"nav-right\">\n//                     <div className=\"boards-menu\">\n//                         {boards.map(board => (\n//                             <button\n//                                 key={board._id}\n//                                 className={`board-nav-item ${board._id === selectedBoardId ? 'active' : ''}`}\n//                                 onClick={() => setSelectedBoardId(board._id)}\n//                             >\n//                                 {board.name}\n//                             </button>\n//                         ))}\n//                     </div>\n//                 </div>\n//             </div>\n\n//             {selectedBoard && (\n//                 <div className=\"board-content\">\n//                     <div className=\"boards-columns\">\n//                         {selectedBoard.columns\n//                             .sort((a, b) => a.order - b.order)\n//                             .map((column, index) => (\n//                                 <div key={index} className=\"column\">\n//                                     <div className=\"column-header\">\n//                                         <div className=\"column-title\">\n//                                             <div \n//                                                 className=\"column-color\" \n//                                                 style={{ \n//                                                     backgroundColor: getColumnColor(column.order)\n//                                                 }}\n//                                             />\n//                                             <span>{column.name}</span>\n//                                         </div>\n//                                         <button className=\"column-add-button\">\n//                                             <Plus size={16} />\n//                                         </button>\n//                                     </div>\n//                                     <div className=\"tasks-container\">\n//                                         {/* Task placeholders */}\n//                                         <div className=\"task-placeholder\">\n//                                             <div className=\"task-placeholder-content\">\n//                                                 <div className=\"placeholder-text\"></div>\n//                                                 <div className=\"placeholder-text short\"></div>\n//                                             </div>\n//                                         </div>\n//                                     </div>\n//                                 </div>\n//                             ))}\n//                     </div>\n//                 </div>\n//             )}\n\n//             {boards.length === 0 && (\n//                 <div className=\"empty-state\">\n//                     <div className=\"empty-icon\">ðŸ“‹</div>\n//                     <h3>No Boards Found</h3>\n//                     <p>Create your first board to get started with your projects!</p>\n//                     <button className=\"create-board-button\">\n//                         <Plus size={20} />\n//                         <span>Create Board</span>\n//                     </button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }\n\nimport { useEffect, useState } from \"react\";\nimport { boardService } from \"../../../Services/BoardService\";\nimport { Plus } from \"lucide-react\";\nimport \"./Home.css\";\n\n// Define the Column interface\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Predefined colors for columns without a specified color\nconst colorPalette = ['#60A5FA',\n// Blue\n'#F59E0B',\n// Orange\n'#10B981',\n// Green\n'#8B5CF6',\n// Purple\n'#EC4899',\n// Pink\n'#14B8A6',\n// Teal\n'#F97316',\n// Dark Orange\n'#6366F1',\n// Indigo\n'#06B6D4',\n// Cyan\n'#84CC16' // Lime\n];\nfunction getColumnColor(column, index) {\n  // Use column's color if defined, otherwise use palette color\n  return column.color || colorPalette[index % colorPalette.length];\n}\nexport function Home() {\n  _s();\n  const [boards, setBoards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedBoardId, setSelectedBoardId] = useState(null);\n  const [selectedBoard, setSelectedBoard] = useState(null);\n  useEffect(() => {\n    (async () => {\n      try {\n        setLoading(true);\n        const fetchedBoards = await boardService.getAllBoards();\n        setBoards(fetchedBoards);\n        if (fetchedBoards.length > 0) {\n          setSelectedBoardId(fetchedBoards[0]._id);\n          setSelectedBoard(fetchedBoards[0]);\n        }\n        setError(null);\n      } catch (err) {\n        setError(\"Failed to fetch boards. Please try again later.\");\n        console.error(\"Error fetching boards:\", err);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, []);\n  useEffect(() => {\n    const board = boards.find(b => b._id === selectedBoardId);\n    setSelectedBoard(board || null);\n  }, [selectedBoardId, boards]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading your boards...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Sort columns by order\n  const sortedColumns = (selectedBoard === null || selectedBoard === void 0 ? void 0 : selectedBoard.columns.slice().sort((a, b) => a.order - b.order)) || [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Home\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boards-nav\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-left\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"My Boards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-right\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"boards-menu\",\n          children: boards.map(board => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `board-nav-item ${board._id === selectedBoardId ? 'active' : ''}`,\n            onClick: () => setSelectedBoardId(board._id),\n            children: board.name\n          }, board._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this), selectedBoard && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"boards-columns\",\n        children: sortedColumns.map((column, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"column-title\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"column-color\",\n                style: {\n                  backgroundColor: getColumnColor(column, index)\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: column.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"column-order\",\n                children: [\"#\", column.order + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"column-add-button\",\n              children: /*#__PURE__*/_jsxDEV(Plus, {\n                size: 16\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tasks-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"task-placeholder\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"task-placeholder-content\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"placeholder-text\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 281,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"placeholder-text short\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 282,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 33\n          }, this)]\n        }, `${column.name}-${column.order}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 17\n    }, this), boards.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty-state\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-icon\",\n        children: \"\\uD83D\\uDCCB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"No Boards Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Create your first board to get started with your projects!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"create-board-button\",\n        children: [/*#__PURE__*/_jsxDEV(Plus, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Create Board\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 9\n  }, this);\n}\n_s(Home, \"SKIQNRAr/8mWAYgZ72QxwvGNKAo=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","boardService","Plus","jsxDEV","_jsxDEV","colorPalette","getColumnColor","column","index","color","length","Home","_s","boards","setBoards","loading","setLoading","error","setError","selectedBoardId","setSelectedBoardId","selectedBoard","setSelectedBoard","fetchedBoards","getAllBoards","_id","err","console","board","find","b","className","children","fileName","_jsxFileName","lineNumber","columnNumber","sortedColumns","columns","slice","sort","a","order","map","onClick","name","style","backgroundColor","size","_c","$RefreshReg$"],"sources":["/Users/rutli/Desktop/PetProjects/Task Manager/Frontend/src/Components/PagesArea/Home/Home.tsx"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n// import { BoardModel } from \"../../../Models/BoardModel\";\n// import { boardService } from \"../../../Services/BoardService\";\n// import { Grid, Layout, Plus, MoreHorizontal } from \"lucide-react\";\n// import \"./Home.css\";\n\n// // Predefined color palette for columns\n// const colorPalette = [\n//     '#60A5FA', // Blue\n//     '#F59E0B', // Orange\n//     '#10B981', // Green\n//     '#8B5CF6', // Purple\n//     '#EC4899', // Pink\n//     '#14B8A6', // Teal\n//     '#F97316', // Dark Orange\n//     '#6366F1', // Indigo\n//     '#06B6D4', // Cyan\n//     '#84CC16'  // Lime\n// ];\n\n// // Function to get a color based on column index\n// function getColumnColor(index: number): string {\n//     // Use modulo to cycle through colors if we have more columns than colors\n//     return colorPalette[index % colorPalette.length];\n// }\n\n// export function Home(): JSX.Element {\n//     const [boards, setBoards] = useState<BoardModel[]>([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState<string | null>(null);\n//     const [selectedBoardId, setSelectedBoardId] = useState<string | null>(null);\n//     const [selectedBoard, setSelectedBoard] = useState<BoardModel | null>(null);\n\n//     useEffect(() => {\n//         (async () => {\n//             try {\n//                 setLoading(true);\n//                 const fetchedBoards = await boardService.getAllBoards();\n//                 setBoards(fetchedBoards);\n//                 if (fetchedBoards.length > 0) {\n//                     setSelectedBoardId(fetchedBoards[0]._id);\n//                     setSelectedBoard(fetchedBoards[0]);\n//                 }\n//                 setError(null);\n//             } catch (err) {\n//                 setError(\"Failed to fetch boards. Please try again later.\");\n//                 console.error(\"Error fetching boards:\", err);\n//             } finally {\n//                 setLoading(false);\n//             }\n//         })();\n//     }, []);\n\n//     useEffect(() => {\n//         const board = boards.find(b => b._id === selectedBoardId);\n//         setSelectedBoard(board || null);\n//     }, [selectedBoardId, boards]);\n\n//     if (loading) {\n//         return (\n//             <div className=\"loading-container\">\n//                 <div className=\"loading-spinner\"></div>\n//                 <span>Loading your boards...</span>\n//             </div>\n//         );\n//     }\n\n//     if (error) {\n//         return (\n//             <div className=\"error-message\">\n//                 <span>{error}</span>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"Home\">\n//             <div className=\"boards-nav\">\n//                 <div className=\"nav-left\">\n//                     <h1 className=\"title\">My Boards</h1>\n//                 </div>\n\n//                 <div className=\"nav-right\">\n//                     <div className=\"boards-menu\">\n//                         {boards.map(board => (\n//                             <button\n//                                 key={board._id}\n//                                 className={`board-nav-item ${board._id === selectedBoardId ? 'active' : ''}`}\n//                                 onClick={() => setSelectedBoardId(board._id)}\n//                             >\n//                                 {board.name}\n//                             </button>\n//                         ))}\n//                     </div>\n//                 </div>\n//             </div>\n\n//             {selectedBoard && (\n//                 <div className=\"board-content\">\n//                     <div className=\"boards-columns\">\n//                         {selectedBoard.columns\n//                             .sort((a, b) => a.order - b.order)\n//                             .map((column, index) => (\n//                                 <div key={index} className=\"column\">\n//                                     <div className=\"column-header\">\n//                                         <div className=\"column-title\">\n//                                             <div \n//                                                 className=\"column-color\" \n//                                                 style={{ \n//                                                     backgroundColor: getColumnColor(column.order)\n//                                                 }}\n//                                             />\n//                                             <span>{column.name}</span>\n//                                         </div>\n//                                         <button className=\"column-add-button\">\n//                                             <Plus size={16} />\n//                                         </button>\n//                                     </div>\n//                                     <div className=\"tasks-container\">\n//                                         {/* Task placeholders */}\n//                                         <div className=\"task-placeholder\">\n//                                             <div className=\"task-placeholder-content\">\n//                                                 <div className=\"placeholder-text\"></div>\n//                                                 <div className=\"placeholder-text short\"></div>\n//                                             </div>\n//                                         </div>\n//                                     </div>\n//                                 </div>\n//                             ))}\n//                     </div>\n//                 </div>\n//             )}\n\n//             {boards.length === 0 && (\n//                 <div className=\"empty-state\">\n//                     <div className=\"empty-icon\">ðŸ“‹</div>\n//                     <h3>No Boards Found</h3>\n//                     <p>Create your first board to get started with your projects!</p>\n//                     <button className=\"create-board-button\">\n//                         <Plus size={20} />\n//                         <span>Create Board</span>\n//                     </button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }\n\n\n\nimport { useEffect, useState } from \"react\";\nimport { BoardModel } from \"../../../Models/BoardModel\";\nimport { boardService } from \"../../../Services/BoardService\";\nimport { Grid, Layout, Plus, MoreHorizontal } from \"lucide-react\";\nimport \"./Home.css\";\n\n// Define the Column interface\ninterface Column {\n    name: string;\n    order: number;\n    color?: string;\n}\n\n// Predefined colors for columns without a specified color\nconst colorPalette = [\n    '#60A5FA', // Blue\n    '#F59E0B', // Orange\n    '#10B981', // Green\n    '#8B5CF6', // Purple\n    '#EC4899', // Pink\n    '#14B8A6', // Teal\n    '#F97316', // Dark Orange\n    '#6366F1', // Indigo\n    '#06B6D4', // Cyan\n    '#84CC16'  // Lime\n];\n\nfunction getColumnColor(column: Column, index: number): string {\n    // Use column's color if defined, otherwise use palette color\n    return column.color || colorPalette[index % colorPalette.length];\n}\n\nexport function Home(): JSX.Element {\n    const [boards, setBoards] = useState<BoardModel[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n    const [selectedBoardId, setSelectedBoardId] = useState<string | null>(null);\n    const [selectedBoard, setSelectedBoard] = useState<BoardModel | null>(null);\n\n    useEffect(() => {\n        (async () => {\n            try {\n                setLoading(true);\n                const fetchedBoards = await boardService.getAllBoards();\n                setBoards(fetchedBoards);\n                if (fetchedBoards.length > 0) {\n                    setSelectedBoardId(fetchedBoards[0]._id);\n                    setSelectedBoard(fetchedBoards[0]);\n                }\n                setError(null);\n            } catch (err) {\n                setError(\"Failed to fetch boards. Please try again later.\");\n                console.error(\"Error fetching boards:\", err);\n            } finally {\n                setLoading(false);\n            }\n        })();\n    }, []);\n\n    useEffect(() => {\n        const board = boards.find(b => b._id === selectedBoardId);\n        setSelectedBoard(board || null);\n    }, [selectedBoardId, boards]);\n\n    if (loading) {\n        return (\n            <div className=\"loading-container\">\n                <div className=\"loading-spinner\"></div>\n                <span>Loading your boards...</span>\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div className=\"error-message\">\n                <span>{error}</span>\n            </div>\n        );\n    }\n\n    // Sort columns by order\n    const sortedColumns = selectedBoard?.columns.slice().sort((a, b) => a.order - b.order) || [];\n\n    return (\n        <div className=\"Home\">\n            <div className=\"boards-nav\">\n                <div className=\"nav-left\">\n                    <h1 className=\"title\">My Boards</h1>\n                </div>\n\n                <div className=\"nav-right\">\n                    <div className=\"boards-menu\">\n                        {boards.map(board => (\n                            <button\n                                key={board._id}\n                                className={`board-nav-item ${board._id === selectedBoardId ? 'active' : ''}`}\n                                onClick={() => setSelectedBoardId(board._id)}\n                            >\n                                {board.name}\n                            </button>\n                        ))}\n                    </div>\n                </div>\n            </div>\n\n            {selectedBoard && (\n                <div className=\"board-content\">\n                    <div className=\"boards-columns\">\n                        {sortedColumns.map((column, index) => (\n                            <div key={`${column.name}-${column.order}`} className=\"column\">\n                                <div className=\"column-header\">\n                                    <div className=\"column-title\">\n                                        <div \n                                            className=\"column-color\" \n                                            style={{ \n                                                backgroundColor: getColumnColor(column, index)\n                                            }}\n                                        />\n                                        <span>{column.name}</span>\n                                        <span className=\"column-order\">#{column.order + 1}</span>\n                                    </div>\n                                    <button className=\"column-add-button\">\n                                        <Plus size={16} />\n                                    </button>\n                                </div>\n                                <div className=\"tasks-container\">\n                                    {/* Task placeholders - will be replaced with actual tasks */}\n                                    <div className=\"task-placeholder\">\n                                        <div className=\"task-placeholder-content\">\n                                            <div className=\"placeholder-text\"></div>\n                                            <div className=\"placeholder-text short\"></div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            )}\n\n            {boards.length === 0 && (\n                <div className=\"empty-state\">\n                    <div className=\"empty-icon\">ðŸ“‹</div>\n                    <h3>No Boards Found</h3>\n                    <p>Create your first board to get started with your projects!</p>\n                    <button className=\"create-board-button\">\n                        <Plus size={20} />\n                        <span>Create Board</span>\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n}"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,YAAY,QAAQ,gCAAgC;AAC7D,SAAuBC,IAAI,QAAwB,cAAc;AACjE,OAAO,YAAY;;AAEnB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOA;AACA,MAAMC,YAAY,GAAG,CACjB,SAAS;AAAE;AACX,SAAS;AAAE;AACX,SAAS;AAAE;AACX,SAAS;AAAE;AACX,SAAS;AAAE;AACX,SAAS;AAAE;AACX,SAAS;AAAE;AACX,SAAS;AAAE;AACX,SAAS;AAAE;AACX,SAAS,CAAE;AAAA,CACd;AAED,SAASC,cAAcA,CAACC,MAAc,EAAEC,KAAa,EAAU;EAC3D;EACA,OAAOD,MAAM,CAACE,KAAK,IAAIJ,YAAY,CAACG,KAAK,GAAGH,YAAY,CAACK,MAAM,CAAC;AACpE;AAEA,OAAO,SAASC,IAAIA,CAAA,EAAgB;EAAAC,EAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}