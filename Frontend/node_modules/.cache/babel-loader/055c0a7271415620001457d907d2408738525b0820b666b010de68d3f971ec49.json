{"ast":null,"code":"var _jsxFileName = \"/Users/rutli/Desktop/PetProjects/Task Manager/Frontend/src/Components/PagesArea/Home/Home.tsx\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from \"react\";\n// import { BoardModel } from \"../../../Models/BoardModel\";\n// import { boardService } from \"../../../Services/BoardService\";\n// import \"./Home.css\";\n\n// export function Home(): JSX.Element {\n//   const [boards, setBoards] = useState<BoardModel[]>([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState<string | null>(null);\n\n//   useEffect(() => {\n//     (async () => {\n//       try {\n//         setLoading(true);\n//         const fetchedBoards = await boardService.getAllBoards();\n//         setBoards(fetchedBoards);\n//         setError(null);\n//       } catch (err) {\n//         setError(\"Failed to fetch boards. Please try again later.\");\n//         console.error(\"Error fetching boards:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     })();\n//   }, []);\n\n//   if (loading) {\n//     return <div className=\"loading-container\">Loading...</div>;\n//   }\n\n//   if (error) {\n//     return (\n//       <div className=\"error-message\">\n//         <span>{error}</span>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"Home\">\n//       <div className=\"boards-nav\">\n//         <h1 className=\"title\">My Boards</h1>\n//         <div className=\"boards-menu\">\n//           {boards.map(b => (\n//             <div className=\"boards-name\">{b.name}</div>\n//           ))}\n//         </div>\n//       </div>\n\n//       <div className=\"boards-grid\">\n//         {boards.map((board) => (\n//           <div key={board._id} className=\"board-card\">\n//             <div className=\"board-header\">\n//               <h2 className=\"board-title\">{board.name}</h2>\n//             </div>\n//             <div>\n//               <h3 className=\"columns-title\">Columns:</h3>\n//               <div className=\"columns-grid\">\n//                 {board.columns\n//                   .sort((a, b) => a.order - b.order)\n//                   .map((column, index) => (\n//                     <div\n//                       key={index}\n//                       className=\"column-item\"\n//                     >\n//                       <span className=\"column-name\">{column.name}</span>\n//                       <span className=\"column-order\">\n//                         (Order: {column.order})\n//                       </span>\n//                     </div>\n//                   ))}\n//               </div>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       {boards.length === 0 && (\n//         <div className=\"empty-message\">\n//           No boards found. Create your first board to get started!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\nimport { useEffect, useState } from \"react\";\nimport { boardService } from \"../../../Services/BoardService\";\nimport { Plus } from \"lucide-react\";\nimport \"./Home.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Home() {\n  _s();\n  const [boards, setBoards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [selectedBoardId, setSelectedBoardId] = useState(null);\n  const columnColors = {\n    'Backlog': '#9CA3AF',\n    'To Do': '#60A5FA',\n    'In Progress': '#F59E0B',\n    'Done': '#10B981'\n  };\n  function getColumnColor(columnName) {\n    if (isColumnName(columnName)) {\n      return columnColors[columnName];\n    }\n    return '#9CA3AF';\n  }\n  function isColumnName(name) {\n    return Object.keys(columnColors).includes(name);\n  }\n  useEffect(() => {\n    (async () => {\n      try {\n        setLoading(true);\n        const fetchedBoards = await boardService.getAllBoards();\n        setBoards(fetchedBoards);\n        if (fetchedBoards.length > 0) {\n          setSelectedBoardId(fetchedBoards[0]._id);\n        }\n        setError(null);\n      } catch (err) {\n        setError(\"Failed to fetch boards. Please try again later.\");\n        console.error(\"Error fetching boards:\", err);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Loading your boards...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Home\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boards-nav\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-left\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"My Boards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-right\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"boards-menu\",\n          children: boards.map(board => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `board-nav-item ${board._id === selectedBoardId ? 'active' : ''}`,\n            onClick: () => setSelectedBoardId(board._id),\n            children: board.name\n          }, board._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasks-grid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), boards.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty-state\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-icon\",\n        children: \"\\uD83D\\uDCCB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"No Boards Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Create your first board to get started with your projects!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"create-board-button\",\n        children: [/*#__PURE__*/_jsxDEV(Plus, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Create Board\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"6WdZchg0sN0YwvIZRNNxkz8sweQ=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","boardService","Plus","jsxDEV","_jsxDEV","Home","_s","boards","setBoards","loading","setLoading","error","setError","selectedBoardId","setSelectedBoardId","columnColors","getColumnColor","columnName","isColumnName","name","Object","keys","includes","fetchedBoards","getAllBoards","length","_id","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","board","onClick","size","_c","$RefreshReg$"],"sources":["/Users/rutli/Desktop/PetProjects/Task Manager/Frontend/src/Components/PagesArea/Home/Home.tsx"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n// import { BoardModel } from \"../../../Models/BoardModel\";\n// import { boardService } from \"../../../Services/BoardService\";\n// import \"./Home.css\";\n\n// export function Home(): JSX.Element {\n//   const [boards, setBoards] = useState<BoardModel[]>([]);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState<string | null>(null);\n\n//   useEffect(() => {\n//     (async () => {\n//       try {\n//         setLoading(true);\n//         const fetchedBoards = await boardService.getAllBoards();\n//         setBoards(fetchedBoards);\n//         setError(null);\n//       } catch (err) {\n//         setError(\"Failed to fetch boards. Please try again later.\");\n//         console.error(\"Error fetching boards:\", err);\n//       } finally {\n//         setLoading(false);\n//       }\n//     })();\n//   }, []);\n\n//   if (loading) {\n//     return <div className=\"loading-container\">Loading...</div>;\n//   }\n\n//   if (error) {\n//     return (\n//       <div className=\"error-message\">\n//         <span>{error}</span>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"Home\">\n//       <div className=\"boards-nav\">\n//         <h1 className=\"title\">My Boards</h1>\n//         <div className=\"boards-menu\">\n//           {boards.map(b => (\n//             <div className=\"boards-name\">{b.name}</div>\n//           ))}\n//         </div>\n//       </div>\n\n//       <div className=\"boards-grid\">\n//         {boards.map((board) => (\n//           <div key={board._id} className=\"board-card\">\n//             <div className=\"board-header\">\n//               <h2 className=\"board-title\">{board.name}</h2>\n//             </div>\n//             <div>\n//               <h3 className=\"columns-title\">Columns:</h3>\n//               <div className=\"columns-grid\">\n//                 {board.columns\n//                   .sort((a, b) => a.order - b.order)\n//                   .map((column, index) => (\n//                     <div\n//                       key={index}\n//                       className=\"column-item\"\n//                     >\n//                       <span className=\"column-name\">{column.name}</span>\n//                       <span className=\"column-order\">\n//                         (Order: {column.order})\n//                       </span>\n//                     </div>\n//                   ))}\n//               </div>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       {boards.length === 0 && (\n//         <div className=\"empty-message\">\n//           No boards found. Create your first board to get started!\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n\n\nimport { useEffect, useState } from \"react\";\nimport { BoardModel } from \"../../../Models/BoardModel\";\nimport { boardService } from \"../../../Services/BoardService\";\nimport { Grid, Layout, Plus, MoreHorizontal } from \"lucide-react\";\nimport \"./Home.css\";\n\n\n\nexport function Home(): JSX.Element {\n  const [boards, setBoards] = useState<BoardModel[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedBoardId, setSelectedBoardId] = useState<string | null>(null);\n\n  type ColumnName = 'Backlog' | 'To Do' | 'In Progress' | 'Done';\n\n  const columnColors: Record<ColumnName, string> = {\n    'Backlog': '#9CA3AF',\n    'To Do': '#60A5FA',\n    'In Progress': '#F59E0B',\n    'Done': '#10B981'\n  };\n\n  function getColumnColor(columnName: string): string {\n    if (isColumnName(columnName)) {\n      return columnColors[columnName];\n    }\n    return '#9CA3AF';\n  }\n\n  function isColumnName(name: string): name is ColumnName {\n    return Object.keys(columnColors).includes(name);\n  }\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setLoading(true);\n        const fetchedBoards = await boardService.getAllBoards();\n        setBoards(fetchedBoards);\n        if (fetchedBoards.length > 0) {\n          setSelectedBoardId(fetchedBoards[0]._id);\n        }\n        setError(null);\n      } catch (err) {\n        setError(\"Failed to fetch boards. Please try again later.\");\n        console.error(\"Error fetching boards:\", err);\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, []);\n\n  if (loading) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <span>Loading your boards...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"error-message\">\n        <span>{error}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Home\">\n      <div className=\"boards-nav\">\n        <div className=\"nav-left\">\n          <h1 className=\"title\">My Boards</h1>\n        </div>\n        <div className=\"nav-right\">\n          <div className=\"boards-menu\">\n            {boards.map(board => (\n              <button\n                key={board._id}\n                className={`board-nav-item ${board._id === selectedBoardId ? 'active' : ''}`}\n                onClick={() => setSelectedBoardId(board._id)}\n              >\n                {board.name}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n\n      <div className=\"tasks-grid\">\n           \n      </div>\n\n      {boards.length === 0 && (\n        <div className=\"empty-state\">\n          <div className=\"empty-icon\">📋</div>\n          <h3>No Boards Found</h3>\n          <p>Create your first board to get started with your projects!</p>\n          <button className=\"create-board-button\">\n            <Plus size={20} />\n            <span>Create Board</span>\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}