{"ast":null,"code":"import axios from \"axios\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass WorkspaceService {\n  // Without Redux for now\n  async getAllWorkspaces() {\n    const response = await axios.get(appConfig.workspacesUrl);\n    const workspaces = response.data;\n    return workspaces;\n  }\n  async getOneWorkspace(workspaceId) {\n    const response = await axios.get(appConfig.workspacesUrl + workspaceId);\n    const workspace = response.data;\n    return workspace;\n  }\n  async getWorkspacesByUser(userId) {\n    const response = await axios.get(`${appConfig.usersUrl}${userId}/workspaces`);\n    const workspaces = response.data;\n    return workspaces;\n  }\n  async addWorkspace(workspace) {\n    const response = await axios.post(appConfig.workspacesUrl, workspace);\n    const dbWorkspace = response.data;\n    return dbWorkspace;\n  }\n  async updateWorkspace(workspace) {\n    const response = await axios.put(appConfig.workspacesUrl + workspace._id, workspace);\n    const dbWorkspace = response.data;\n    return dbWorkspace;\n  }\n  async deleteWorkspace(workspaceId) {\n    await axios.delete(appConfig.workspacesUrl + workspaceId);\n  }\n  async addMember(workspaceId, userId, role = 'member') {\n    const response = await axios.post(`${appConfig.workspacesUrl}${workspaceId}/members`, {\n      userId,\n      role\n    });\n    const dbWorkspace = response.data;\n    return dbWorkspace;\n  }\n  async removeMember(workspaceId, userId) {\n    const response = await axios.post(`${appConfig.workspacesUrl}${workspaceId}/members/${userId}`);\n    const dbWorkspace = response.data;\n    return dbWorkspace;\n  }\n}\nexport const workspaceService = new WorkspaceService();","map":{"version":3,"names":["axios","appConfig","WorkspaceService","getAllWorkspaces","response","get","workspacesUrl","workspaces","data","getOneWorkspace","workspaceId","workspace","getWorkspacesByUser","userId","usersUrl","addWorkspace","post","dbWorkspace","updateWorkspace","put","_id","deleteWorkspace","delete","addMember","role","removeMember","workspaceService"],"sources":["/Users/rutli/Desktop/PetProjects/Task Manager/Frontend/src/Services/WorkspaceService.ts"],"sourcesContent":["import axios from \"axios\";\nimport { WorkspaceModel } from \"../Models/WorkspaceModel\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass WorkspaceService {\n\n    // Without Redux for now\n\tpublic async getAllWorkspaces(): Promise<WorkspaceModel[]> {\n        const response = await axios.get(appConfig.workspacesUrl);\n        const workspaces = response.data;\n        return workspaces;\n    }\n\n\tpublic async getOneWorkspace(workspaceId: string): Promise<WorkspaceModel> {\n        const response = await axios.get(appConfig.workspacesUrl + workspaceId);\n        const workspace = response.data;\n        return workspace;\n    }\n\n\tpublic async getWorkspacesByUser(userId: string): Promise<WorkspaceModel[]> {\n        const response = await axios.get(`${appConfig.usersUrl}${userId}/workspaces`);\n        const workspaces = response.data;\n        return workspaces;\n    }\n\n\tpublic async addWorkspace(workspace: WorkspaceModel): Promise<WorkspaceModel> {\n        const response = await axios.post(appConfig.workspacesUrl, workspace);\n        const dbWorkspace = response.data;\n        return dbWorkspace;\n    }\n\n\tpublic async updateWorkspace(workspace: WorkspaceModel): Promise<WorkspaceModel> {\n        const response = await axios.put(appConfig.workspacesUrl + workspace._id, workspace);\n        const dbWorkspace = response.data;\n        return dbWorkspace;\n    }\n\n\tpublic async deleteWorkspace(workspaceId: string): Promise<void> {\n        await axios.delete(appConfig.workspacesUrl + workspaceId);\n    }\n\n    public async addMember(workspaceId: string, userId: string, role: 'admin' | 'member' = 'member'): Promise<WorkspaceModel> {\n        const response = await axios.post(`${appConfig.workspacesUrl}${workspaceId}/members`,{userId, role});\n        const dbWorkspace = response.data;\n        return dbWorkspace;\n    }\n\n    public async removeMember(workspaceId: string, userId: string): Promise<WorkspaceModel> {\n        const response = await axios.post(`${appConfig.workspacesUrl}${workspaceId}/members/${userId}`);\n        const dbWorkspace = response.data;\n        return dbWorkspace;\n    }\n    \n}\n\nexport const workspaceService = new WorkspaceService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,SAAS,QAAQ,oBAAoB;AAE9C,MAAMC,gBAAgB,CAAC;EAEnB;EACH,MAAaC,gBAAgBA,CAAA,EAA8B;IACpD,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAACJ,SAAS,CAACK,aAAa,CAAC;IACzD,MAAMC,UAAU,GAAGH,QAAQ,CAACI,IAAI;IAChC,OAAOD,UAAU;EACrB;EAEH,MAAaE,eAAeA,CAACC,WAAmB,EAA2B;IACpE,MAAMN,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAACJ,SAAS,CAACK,aAAa,GAAGI,WAAW,CAAC;IACvE,MAAMC,SAAS,GAAGP,QAAQ,CAACI,IAAI;IAC/B,OAAOG,SAAS;EACpB;EAEH,MAAaC,mBAAmBA,CAACC,MAAc,EAA6B;IACrE,MAAMT,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,SAAS,CAACa,QAAQ,GAAGD,MAAM,aAAa,CAAC;IAC7E,MAAMN,UAAU,GAAGH,QAAQ,CAACI,IAAI;IAChC,OAAOD,UAAU;EACrB;EAEH,MAAaQ,YAAYA,CAACJ,SAAyB,EAA2B;IACvE,MAAMP,QAAQ,GAAG,MAAMJ,KAAK,CAACgB,IAAI,CAACf,SAAS,CAACK,aAAa,EAAEK,SAAS,CAAC;IACrE,MAAMM,WAAW,GAAGb,QAAQ,CAACI,IAAI;IACjC,OAAOS,WAAW;EACtB;EAEH,MAAaC,eAAeA,CAACP,SAAyB,EAA2B;IAC1E,MAAMP,QAAQ,GAAG,MAAMJ,KAAK,CAACmB,GAAG,CAAClB,SAAS,CAACK,aAAa,GAAGK,SAAS,CAACS,GAAG,EAAET,SAAS,CAAC;IACpF,MAAMM,WAAW,GAAGb,QAAQ,CAACI,IAAI;IACjC,OAAOS,WAAW;EACtB;EAEH,MAAaI,eAAeA,CAACX,WAAmB,EAAiB;IAC1D,MAAMV,KAAK,CAACsB,MAAM,CAACrB,SAAS,CAACK,aAAa,GAAGI,WAAW,CAAC;EAC7D;EAEA,MAAaa,SAASA,CAACb,WAAmB,EAAEG,MAAc,EAAEW,IAAwB,GAAG,QAAQ,EAA2B;IACtH,MAAMpB,QAAQ,GAAG,MAAMJ,KAAK,CAACgB,IAAI,CAAC,GAAGf,SAAS,CAACK,aAAa,GAAGI,WAAW,UAAU,EAAC;MAACG,MAAM;MAAEW;IAAI,CAAC,CAAC;IACpG,MAAMP,WAAW,GAAGb,QAAQ,CAACI,IAAI;IACjC,OAAOS,WAAW;EACtB;EAEA,MAAaQ,YAAYA,CAACf,WAAmB,EAAEG,MAAc,EAA2B;IACpF,MAAMT,QAAQ,GAAG,MAAMJ,KAAK,CAACgB,IAAI,CAAC,GAAGf,SAAS,CAACK,aAAa,GAAGI,WAAW,YAAYG,MAAM,EAAE,CAAC;IAC/F,MAAMI,WAAW,GAAGb,QAAQ,CAACI,IAAI;IACjC,OAAOS,WAAW;EACtB;AAEJ;AAEA,OAAO,MAAMS,gBAAgB,GAAG,IAAIxB,gBAAgB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}