{"ast":null,"code":"import axios from \"axios\";\nimport { appConfig } from \"../Utils/AppConfig\";\nclass BoardService {\n  async getAllBoards() {\n    const response = await axios.get(appConfig.boardsUrl);\n    const boards = response.data;\n    return boards;\n  }\n  async getOneBoard(boardId) {\n    const response = await axios.get(appConfig.boardsUrl + boardId);\n    const boards = response.data;\n    return boards;\n  }\n  async getBoardsByWorkspace(workspaceId) {\n    const response = await axios.get(appConfig.getWorkspaceBoardsUrl(workspaceId));\n    const boards = response.data;\n    return boards;\n  }\n  async addBoard(board) {\n    const response = await axios.post(appConfig.boardsUrl, board);\n    const dbBoard = response.data;\n    return dbBoard;\n  }\n  async updateBoard(board) {\n    const response = await axios.put(appConfig.boardsUrl + board._id, board);\n    const dbBoard = response.data;\n    return dbBoard;\n  }\n  async deleteBoard(boardId) {\n    await axios.put(appConfig.boardsUrl + boardId);\n  }\n  async updateColumns(boardId, columns) {\n    const response = await axios.put(`${appConfig.boardsUrl}/${boardId}`, {\n      columns\n    });\n    const dbBoard = response.data;\n    return dbBoard;\n  }\n}\nexport const boardService = new BoardService();","map":{"version":3,"names":["axios","appConfig","BoardService","getAllBoards","response","get","boardsUrl","boards","data","getOneBoard","boardId","getBoardsByWorkspace","workspaceId","getWorkspaceBoardsUrl","addBoard","board","post","dbBoard","updateBoard","put","_id","deleteBoard","updateColumns","columns","boardService"],"sources":["/Users/rutli/Desktop/PetProjects/Task Manager/Frontend/src/Services/BoardService.ts"],"sourcesContent":["import axios from \"axios\";\nimport { BoardModel } from \"../Models/BoardModel\";\nimport { appConfig } from \"../Utils/AppConfig\";\n\nclass BoardService {\n\n    public async getAllBoards(): Promise<BoardModel[]> {\n        const response = await axios.get(appConfig.boardsUrl);\n        const boards = response.data;\n        return boards;\n    }\n\n    public async getOneBoard(boardId: string): Promise<BoardModel> {\n        const response = await axios.get(appConfig.boardsUrl + boardId);\n        const boards = response.data;\n        return boards;\n    }\n\n    public async getBoardsByWorkspace(workspaceId: string): Promise<BoardModel[]> {\n        const response = await axios.get(appConfig.getWorkspaceBoardsUrl(workspaceId));\n        const boards = response.data;\n        return boards;\n    }\n\n    public async addBoard(board: BoardModel): Promise<BoardModel> {\n        const response = await axios.post(appConfig.boardsUrl, board);\n        const dbBoard = response.data;\n        return dbBoard;\n    }\n\n    public async updateBoard(board: BoardModel): Promise<BoardModel> {\n        const response = await axios.put(appConfig.boardsUrl + board._id, board);\n        const dbBoard = response.data;\n        return dbBoard;\n    }\n    \n    public async deleteBoard(boardId: string): Promise<void> {\n        await axios.put(appConfig.boardsUrl + boardId);\n    }\n\n    public async updateColumns(boardId: string, columns: { name: string; order: number; }[]): Promise<BoardModel> {\n        const response = await axios.put(`${appConfig.boardsUrl}/${boardId}`,{ columns });\n        const dbBoard = response.data;\n        return dbBoard;\n    }\n\n}\n\nexport const boardService = new BoardService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,SAAS,QAAQ,oBAAoB;AAE9C,MAAMC,YAAY,CAAC;EAEf,MAAaC,YAAYA,CAAA,EAA0B;IAC/C,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAACJ,SAAS,CAACK,SAAS,CAAC;IACrD,MAAMC,MAAM,GAAGH,QAAQ,CAACI,IAAI;IAC5B,OAAOD,MAAM;EACjB;EAEA,MAAaE,WAAWA,CAACC,OAAe,EAAuB;IAC3D,MAAMN,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAACJ,SAAS,CAACK,SAAS,GAAGI,OAAO,CAAC;IAC/D,MAAMH,MAAM,GAAGH,QAAQ,CAACI,IAAI;IAC5B,OAAOD,MAAM;EACjB;EAEA,MAAaI,oBAAoBA,CAACC,WAAmB,EAAyB;IAC1E,MAAMR,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAACJ,SAAS,CAACY,qBAAqB,CAACD,WAAW,CAAC,CAAC;IAC9E,MAAML,MAAM,GAAGH,QAAQ,CAACI,IAAI;IAC5B,OAAOD,MAAM;EACjB;EAEA,MAAaO,QAAQA,CAACC,KAAiB,EAAuB;IAC1D,MAAMX,QAAQ,GAAG,MAAMJ,KAAK,CAACgB,IAAI,CAACf,SAAS,CAACK,SAAS,EAAES,KAAK,CAAC;IAC7D,MAAME,OAAO,GAAGb,QAAQ,CAACI,IAAI;IAC7B,OAAOS,OAAO;EAClB;EAEA,MAAaC,WAAWA,CAACH,KAAiB,EAAuB;IAC7D,MAAMX,QAAQ,GAAG,MAAMJ,KAAK,CAACmB,GAAG,CAAClB,SAAS,CAACK,SAAS,GAAGS,KAAK,CAACK,GAAG,EAAEL,KAAK,CAAC;IACxE,MAAME,OAAO,GAAGb,QAAQ,CAACI,IAAI;IAC7B,OAAOS,OAAO;EAClB;EAEA,MAAaI,WAAWA,CAACX,OAAe,EAAiB;IACrD,MAAMV,KAAK,CAACmB,GAAG,CAAClB,SAAS,CAACK,SAAS,GAAGI,OAAO,CAAC;EAClD;EAEA,MAAaY,aAAaA,CAACZ,OAAe,EAAEa,OAA2C,EAAuB;IAC1G,MAAMnB,QAAQ,GAAG,MAAMJ,KAAK,CAACmB,GAAG,CAAC,GAAGlB,SAAS,CAACK,SAAS,IAAII,OAAO,EAAE,EAAC;MAAEa;IAAQ,CAAC,CAAC;IACjF,MAAMN,OAAO,GAAGb,QAAQ,CAACI,IAAI;IAC7B,OAAOS,OAAO;EAClB;AAEJ;AAEA,OAAO,MAAMO,YAAY,GAAG,IAAItB,YAAY,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}