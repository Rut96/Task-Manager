{"ast":null,"code":"// import { useEffect, useState } from \"react\";\n// import { BoardModel } from \"../../../Models/BoardModel\";\n// import { boardService } from \"../../../Services/BoardService\";\n// import { Grid, Layout, Plus, MoreHorizontal } from \"lucide-react\";\n// import \"./Home.css\";\n\n// // Predefined color palette for columns\n// const colorPalette = [\n//     '#60A5FA', // Blue\n//     '#F59E0B', // Orange\n//     '#10B981', // Green\n//     '#8B5CF6', // Purple\n//     '#EC4899', // Pink\n//     '#14B8A6', // Teal\n//     '#F97316', // Dark Orange\n//     '#6366F1', // Indigo\n//     '#06B6D4', // Cyan\n//     '#84CC16'  // Lime\n// ];\n\n// // Function to get a color based on column index\n// function getColumnColor(index: number): string {\n//     // Use modulo to cycle through colors if we have more columns than colors\n//     return colorPalette[index % colorPalette.length];\n// }\n\n// export function Home(): JSX.Element {\n//     const [boards, setBoards] = useState<BoardModel[]>([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState<string | null>(null);\n//     const [selectedBoardId, setSelectedBoardId] = useState<string | null>(null);\n//     const [selectedBoard, setSelectedBoard] = useState<BoardModel | null>(null);\n\n//     useEffect(() => {\n//         (async () => {\n//             try {\n//                 setLoading(true);\n//                 const fetchedBoards = await boardService.getAllBoards();\n//                 setBoards(fetchedBoards);\n//                 if (fetchedBoards.length > 0) {\n//                     setSelectedBoardId(fetchedBoards[0]._id);\n//                     setSelectedBoard(fetchedBoards[0]);\n//                 }\n//                 setError(null);\n//             } catch (err) {\n//                 setError(\"Failed to fetch boards. Please try again later.\");\n//                 console.error(\"Error fetching boards:\", err);\n//             } finally {\n//                 setLoading(false);\n//             }\n//         })();\n//     }, []);\n\n//     useEffect(() => {\n//         const board = boards.find(b => b._id === selectedBoardId);\n//         setSelectedBoard(board || null);\n//     }, [selectedBoardId, boards]);\n\n//     if (loading) {\n//         return (\n//             <div className=\"loading-container\">\n//                 <div className=\"loading-spinner\"></div>\n//                 <span>Loading your boards...</span>\n//             </div>\n//         );\n//     }\n\n//     if (error) {\n//         return (\n//             <div className=\"error-message\">\n//                 <span>{error}</span>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"Home\">\n//             <div className=\"boards-nav\">\n//                 <div className=\"nav-left\">\n//                     <h1 className=\"title\">My Boards</h1>\n//                 </div>\n\n//                 <div className=\"nav-right\">\n//                     <div className=\"boards-menu\">\n//                         {boards.map(board => (\n//                             <button\n//                                 key={board._id}\n//                                 className={`board-nav-item ${board._id === selectedBoardId ? 'active' : ''}`}\n//                                 onClick={() => setSelectedBoardId(board._id)}\n//                             >\n//                                 {board.name}\n//                             </button>\n//                         ))}\n//                     </div>\n//                 </div>\n//             </div>\n\n//             {selectedBoard && (\n//                 <div className=\"board-content\">\n//                     <div className=\"boards-columns\">\n//                         {selectedBoard.columns\n//                             .sort((a, b) => a.order - b.order)\n//                             .map((column, index) => (\n//                                 <div key={index} className=\"column\">\n//                                     <div className=\"column-header\">\n//                                         <div className=\"column-title\">\n//                                             <div \n//                                                 className=\"column-color\" \n//                                                 style={{ \n//                                                     backgroundColor: getColumnColor(column.order)\n//                                                 }}\n//                                             />\n//                                             <span>{column.name}</span>\n//                                         </div>\n//                                         <button className=\"column-add-button\">\n//                                             <Plus size={16} />\n//                                         </button>\n//                                     </div>\n//                                     <div className=\"tasks-container\">\n//                                         {/* Task placeholders */}\n//                                         <div className=\"task-placeholder\">\n//                                             <div className=\"task-placeholder-content\">\n//                                                 <div className=\"placeholder-text\"></div>\n//                                                 <div className=\"placeholder-text short\"></div>\n//                                             </div>\n//                                         </div>\n//                                     </div>\n//                                 </div>\n//                             ))}\n//                     </div>\n//                 </div>\n//             )}\n\n//             {boards.length === 0 && (\n//                 <div className=\"empty-state\">\n//                     <div className=\"empty-icon\">ðŸ“‹</div>\n//                     <h3>No Boards Found</h3>\n//                     <p>Create your first board to get started with your projects!</p>\n//                     <button className=\"create-board-button\">\n//                         <Plus size={20} />\n//                         <span>Create Board</span>\n//                     </button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }","map":{"version":3,"names":[],"sources":["/Users/rutli/Desktop/PetProjects/Task Manager/Frontend/src/Components/PagesArea/Home/Home.tsx"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n// import { BoardModel } from \"../../../Models/BoardModel\";\n// import { boardService } from \"../../../Services/BoardService\";\n// import { Grid, Layout, Plus, MoreHorizontal } from \"lucide-react\";\n// import \"./Home.css\";\n\n// // Predefined color palette for columns\n// const colorPalette = [\n//     '#60A5FA', // Blue\n//     '#F59E0B', // Orange\n//     '#10B981', // Green\n//     '#8B5CF6', // Purple\n//     '#EC4899', // Pink\n//     '#14B8A6', // Teal\n//     '#F97316', // Dark Orange\n//     '#6366F1', // Indigo\n//     '#06B6D4', // Cyan\n//     '#84CC16'  // Lime\n// ];\n\n// // Function to get a color based on column index\n// function getColumnColor(index: number): string {\n//     // Use modulo to cycle through colors if we have more columns than colors\n//     return colorPalette[index % colorPalette.length];\n// }\n\n// export function Home(): JSX.Element {\n//     const [boards, setBoards] = useState<BoardModel[]>([]);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState<string | null>(null);\n//     const [selectedBoardId, setSelectedBoardId] = useState<string | null>(null);\n//     const [selectedBoard, setSelectedBoard] = useState<BoardModel | null>(null);\n\n//     useEffect(() => {\n//         (async () => {\n//             try {\n//                 setLoading(true);\n//                 const fetchedBoards = await boardService.getAllBoards();\n//                 setBoards(fetchedBoards);\n//                 if (fetchedBoards.length > 0) {\n//                     setSelectedBoardId(fetchedBoards[0]._id);\n//                     setSelectedBoard(fetchedBoards[0]);\n//                 }\n//                 setError(null);\n//             } catch (err) {\n//                 setError(\"Failed to fetch boards. Please try again later.\");\n//                 console.error(\"Error fetching boards:\", err);\n//             } finally {\n//                 setLoading(false);\n//             }\n//         })();\n//     }, []);\n\n//     useEffect(() => {\n//         const board = boards.find(b => b._id === selectedBoardId);\n//         setSelectedBoard(board || null);\n//     }, [selectedBoardId, boards]);\n\n//     if (loading) {\n//         return (\n//             <div className=\"loading-container\">\n//                 <div className=\"loading-spinner\"></div>\n//                 <span>Loading your boards...</span>\n//             </div>\n//         );\n//     }\n\n//     if (error) {\n//         return (\n//             <div className=\"error-message\">\n//                 <span>{error}</span>\n//             </div>\n//         );\n//     }\n\n//     return (\n//         <div className=\"Home\">\n//             <div className=\"boards-nav\">\n//                 <div className=\"nav-left\">\n//                     <h1 className=\"title\">My Boards</h1>\n//                 </div>\n\n//                 <div className=\"nav-right\">\n//                     <div className=\"boards-menu\">\n//                         {boards.map(board => (\n//                             <button\n//                                 key={board._id}\n//                                 className={`board-nav-item ${board._id === selectedBoardId ? 'active' : ''}`}\n//                                 onClick={() => setSelectedBoardId(board._id)}\n//                             >\n//                                 {board.name}\n//                             </button>\n//                         ))}\n//                     </div>\n//                 </div>\n//             </div>\n\n//             {selectedBoard && (\n//                 <div className=\"board-content\">\n//                     <div className=\"boards-columns\">\n//                         {selectedBoard.columns\n//                             .sort((a, b) => a.order - b.order)\n//                             .map((column, index) => (\n//                                 <div key={index} className=\"column\">\n//                                     <div className=\"column-header\">\n//                                         <div className=\"column-title\">\n//                                             <div \n//                                                 className=\"column-color\" \n//                                                 style={{ \n//                                                     backgroundColor: getColumnColor(column.order)\n//                                                 }}\n//                                             />\n//                                             <span>{column.name}</span>\n//                                         </div>\n//                                         <button className=\"column-add-button\">\n//                                             <Plus size={16} />\n//                                         </button>\n//                                     </div>\n//                                     <div className=\"tasks-container\">\n//                                         {/* Task placeholders */}\n//                                         <div className=\"task-placeholder\">\n//                                             <div className=\"task-placeholder-content\">\n//                                                 <div className=\"placeholder-text\"></div>\n//                                                 <div className=\"placeholder-text short\"></div>\n//                                             </div>\n//                                         </div>\n//                                     </div>\n//                                 </div>\n//                             ))}\n//                     </div>\n//                 </div>\n//             )}\n\n//             {boards.length === 0 && (\n//                 <div className=\"empty-state\">\n//                     <div className=\"empty-icon\">ðŸ“‹</div>\n//                     <h3>No Boards Found</h3>\n//                     <p>Create your first board to get started with your projects!</p>\n//                     <button className=\"create-board-button\">\n//                         <Plus size={20} />\n//                         <span>Create Board</span>\n//                     </button>\n//                 </div>\n//             )}\n//         </div>\n//     );\n// }\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}