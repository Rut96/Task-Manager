{"ast":null,"code":"import axios from \"axios\";\nimport { appConfig } from \"../Utils/AppConfig\";\nimport { store } from \"../Redux/Store\";\nimport { taskActions } from \"../Redux/TaskSlice\";\nclass TaskService {\n  // Without Redux for now\n  async getAllTasks() {\n    const response = await axios.get(appConfig.tasksUrl);\n    const action = taskActions.initTasks(response.data);\n    store.dispatch(action);\n    return response.data;\n  }\n  async getOneTask(taskId) {\n    const response = await axios.get(`${appConfig.tasksUrl}/${taskId}`);\n    return response.data;\n  }\n  async getTasksByBoard(boardId) {\n    const response = await axios.get(`${appConfig.boardsUrl}/${boardId}/tasks`);\n    const action = taskActions.initTasks(response.data);\n    store.dispatch(action);\n    return response.data;\n  }\n  async getTasksByColumn(boardId, columnId) {\n    const response = await axios.get(`${appConfig.boardsUrl}${boardId}/columns/${columnId}/tasks`);\n    const action = taskActions.initTasks(response.data);\n    store.dispatch(action);\n    console.log('Tasks', response.data);\n    return response.data;\n  }\n  async addTask(task) {\n    const response = await axios.post(appConfig.tasksUrl, task);\n    const action = taskActions.addTask(response.data);\n    store.dispatch(action);\n    return response.data;\n  }\n  async updateTask(task) {\n    const response = await axios.put(`${appConfig.tasksUrl}/${task._id}`, task); // Here, 'task' is the request body\n\n    const action = taskActions.updateTask(response.data);\n    store.dispatch(action);\n    return response.data;\n  }\n  async updateStatus(taskId, columnId) {\n    const response = await axios.patch(`${appConfig.tasksUrl}/${taskId}/status`, {\n      columnId\n    } //  This creates an object: { columnId: \"someColumnId\" }\n    );\n    const action = taskActions.updateTask(response.data);\n    store.dispatch(action);\n    return response.data;\n  }\n  async addAssignee(taskId, userId) {\n    const response = await axios.post(`${appConfig.tasksUrl}/${taskId}/assignees`, {\n      userId\n    });\n    const action = taskActions.updateTask(response.data);\n    store.dispatch(action);\n    return response.data;\n  }\n  async removeAssignee(taskId, userId) {\n    const response = await axios.delete(`${appConfig.tasksUrl}/${taskId}/assignees/${userId}`);\n    const action = taskActions.updateTask(response.data);\n    store.dispatch(action);\n    return response.data;\n  }\n  async deleteTask(taskId) {\n    await axios.delete(`${appConfig.tasksUrl}/${taskId}`);\n    const action = taskActions.deleteTask(taskId);\n    store.dispatch(action);\n  }\n}\nexport const taskService = new TaskService();","map":{"version":3,"names":["axios","appConfig","store","taskActions","TaskService","getAllTasks","response","get","tasksUrl","action","initTasks","data","dispatch","getOneTask","taskId","getTasksByBoard","boardId","boardsUrl","getTasksByColumn","columnId","console","log","addTask","task","post","updateTask","put","_id","updateStatus","patch","addAssignee","userId","removeAssignee","delete","deleteTask","taskService"],"sources":["/Users/rutli/Desktop/PetProjects/Task Manager/Frontend/src/Services/TaskService.ts"],"sourcesContent":["import axios from \"axios\";\nimport { appConfig } from \"../Utils/AppConfig\";\nimport { TaskModel } from \"../Models/TaskModel\";\nimport { store } from \"../Redux/Store\";\nimport { taskActions } from \"../Redux/TaskSlice\";\n\nclass TaskService {\n\n    // Without Redux for now\n    public async getAllTasks(): Promise<TaskModel[]> {\n        const response = await axios.get<TaskModel[]>(appConfig.tasksUrl);\n\n        const action = taskActions.initTasks(response.data)\n        store.dispatch(action);\n\n        return response.data;\n    }\n\n    public async getOneTask(taskId: string): Promise<TaskModel> {\n        const response = await axios.get<TaskModel>(`${appConfig.tasksUrl}/${taskId}`);\n        return response.data;\n    }\n\n    public async getTasksByBoard(boardId: string): Promise<TaskModel[]> {\n        const response = await axios.get<TaskModel[]>(`${appConfig.boardsUrl}/${boardId}/tasks`);\n\n        const action = taskActions.initTasks(response.data)\n        store.dispatch(action);\n\n        return response.data;\n    }\n\n    public async getTasksByColumn(boardId: string, columnId: string): Promise<TaskModel[]> {\n        const response = await axios.get<TaskModel[]>(`${appConfig.boardsUrl}${boardId}/columns/${columnId}/tasks`);\n\n        const action = taskActions.initTasks(response.data)\n        store.dispatch(action);\n        console.log('Tasks', response.data);\n        return response.data;\n    }\n\n    public async addTask(task: TaskModel): Promise<TaskModel> {\n        const response = await axios.post<TaskModel>(appConfig.tasksUrl, task);\n\n        const action = taskActions.addTask(response.data)\n        store.dispatch(action);\n\n        return response.data;\n    }\n\n    public async updateTask(task: Partial<TaskModel>): Promise<TaskModel> {\n        const response = await axios.put<TaskModel>(`${appConfig.tasksUrl}/${task._id}`, task); // Here, 'task' is the request body\n\n        const action = taskActions.updateTask(response.data)\n        store.dispatch(action);\n\n        return response.data;\n    }\n\n    public async updateStatus(taskId: string, columnId: string): Promise<TaskModel> {\n        const response = await axios.patch<TaskModel>(\n            `${appConfig.tasksUrl}/${taskId}/status`,\n            { columnId } //  This creates an object: { columnId: \"someColumnId\" }\n        );\n\n        const action = taskActions.updateTask(response.data)\n        store.dispatch(action);\n\n        return response.data;\n    }\n\n    public async addAssignee(taskId: string, userId: string): Promise<TaskModel> {\n        const response = await axios.post<TaskModel>(\n            `${appConfig.tasksUrl}/${taskId}/assignees`,\n            { userId }\n        );\n\n        const action = taskActions.updateTask(response.data)\n        store.dispatch(action);\n\n        return response.data;\n    }\n\n    public async removeAssignee(taskId: string, userId: string): Promise<TaskModel> {\n        const response = await axios.delete<TaskModel>(\n            `${appConfig.tasksUrl}/${taskId}/assignees/${userId}`\n        );\n\n        const action = taskActions.updateTask(response.data)\n        store.dispatch(action);\n\n        return response.data;\n    }\n\n    public async deleteTask(taskId: string): Promise<void> {\n        await axios.delete(`${appConfig.tasksUrl}/${taskId}`);\n\n        const action = taskActions.deleteTask(taskId)\n        store.dispatch(action);\n    }\n}\n\nexport const taskService = new TaskService();"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,oBAAoB;AAE9C,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,WAAW,QAAQ,oBAAoB;AAEhD,MAAMC,WAAW,CAAC;EAEd;EACA,MAAaC,WAAWA,CAAA,EAAyB;IAC7C,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAcN,SAAS,CAACO,QAAQ,CAAC;IAEjE,MAAMC,MAAM,GAAGN,WAAW,CAACO,SAAS,CAACJ,QAAQ,CAACK,IAAI,CAAC;IACnDT,KAAK,CAACU,QAAQ,CAACH,MAAM,CAAC;IAEtB,OAAOH,QAAQ,CAACK,IAAI;EACxB;EAEA,MAAaE,UAAUA,CAACC,MAAc,EAAsB;IACxD,MAAMR,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAY,GAAGN,SAAS,CAACO,QAAQ,IAAIM,MAAM,EAAE,CAAC;IAC9E,OAAOR,QAAQ,CAACK,IAAI;EACxB;EAEA,MAAaI,eAAeA,CAACC,OAAe,EAAwB;IAChE,MAAMV,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAc,GAAGN,SAAS,CAACgB,SAAS,IAAID,OAAO,QAAQ,CAAC;IAExF,MAAMP,MAAM,GAAGN,WAAW,CAACO,SAAS,CAACJ,QAAQ,CAACK,IAAI,CAAC;IACnDT,KAAK,CAACU,QAAQ,CAACH,MAAM,CAAC;IAEtB,OAAOH,QAAQ,CAACK,IAAI;EACxB;EAEA,MAAaO,gBAAgBA,CAACF,OAAe,EAAEG,QAAgB,EAAwB;IACnF,MAAMb,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAc,GAAGN,SAAS,CAACgB,SAAS,GAAGD,OAAO,YAAYG,QAAQ,QAAQ,CAAC;IAE3G,MAAMV,MAAM,GAAGN,WAAW,CAACO,SAAS,CAACJ,QAAQ,CAACK,IAAI,CAAC;IACnDT,KAAK,CAACU,QAAQ,CAACH,MAAM,CAAC;IACtBW,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEf,QAAQ,CAACK,IAAI,CAAC;IACnC,OAAOL,QAAQ,CAACK,IAAI;EACxB;EAEA,MAAaW,OAAOA,CAACC,IAAe,EAAsB;IACtD,MAAMjB,QAAQ,GAAG,MAAMN,KAAK,CAACwB,IAAI,CAAYvB,SAAS,CAACO,QAAQ,EAAEe,IAAI,CAAC;IAEtE,MAAMd,MAAM,GAAGN,WAAW,CAACmB,OAAO,CAAChB,QAAQ,CAACK,IAAI,CAAC;IACjDT,KAAK,CAACU,QAAQ,CAACH,MAAM,CAAC;IAEtB,OAAOH,QAAQ,CAACK,IAAI;EACxB;EAEA,MAAac,UAAUA,CAACF,IAAwB,EAAsB;IAClE,MAAMjB,QAAQ,GAAG,MAAMN,KAAK,CAAC0B,GAAG,CAAY,GAAGzB,SAAS,CAACO,QAAQ,IAAIe,IAAI,CAACI,GAAG,EAAE,EAAEJ,IAAI,CAAC,CAAC,CAAC;;IAExF,MAAMd,MAAM,GAAGN,WAAW,CAACsB,UAAU,CAACnB,QAAQ,CAACK,IAAI,CAAC;IACpDT,KAAK,CAACU,QAAQ,CAACH,MAAM,CAAC;IAEtB,OAAOH,QAAQ,CAACK,IAAI;EACxB;EAEA,MAAaiB,YAAYA,CAACd,MAAc,EAAEK,QAAgB,EAAsB;IAC5E,MAAMb,QAAQ,GAAG,MAAMN,KAAK,CAAC6B,KAAK,CAC9B,GAAG5B,SAAS,CAACO,QAAQ,IAAIM,MAAM,SAAS,EACxC;MAAEK;IAAS,CAAC,CAAC;IACjB,CAAC;IAED,MAAMV,MAAM,GAAGN,WAAW,CAACsB,UAAU,CAACnB,QAAQ,CAACK,IAAI,CAAC;IACpDT,KAAK,CAACU,QAAQ,CAACH,MAAM,CAAC;IAEtB,OAAOH,QAAQ,CAACK,IAAI;EACxB;EAEA,MAAamB,WAAWA,CAAChB,MAAc,EAAEiB,MAAc,EAAsB;IACzE,MAAMzB,QAAQ,GAAG,MAAMN,KAAK,CAACwB,IAAI,CAC7B,GAAGvB,SAAS,CAACO,QAAQ,IAAIM,MAAM,YAAY,EAC3C;MAAEiB;IAAO,CACb,CAAC;IAED,MAAMtB,MAAM,GAAGN,WAAW,CAACsB,UAAU,CAACnB,QAAQ,CAACK,IAAI,CAAC;IACpDT,KAAK,CAACU,QAAQ,CAACH,MAAM,CAAC;IAEtB,OAAOH,QAAQ,CAACK,IAAI;EACxB;EAEA,MAAaqB,cAAcA,CAAClB,MAAc,EAAEiB,MAAc,EAAsB;IAC5E,MAAMzB,QAAQ,GAAG,MAAMN,KAAK,CAACiC,MAAM,CAC/B,GAAGhC,SAAS,CAACO,QAAQ,IAAIM,MAAM,cAAciB,MAAM,EACvD,CAAC;IAED,MAAMtB,MAAM,GAAGN,WAAW,CAACsB,UAAU,CAACnB,QAAQ,CAACK,IAAI,CAAC;IACpDT,KAAK,CAACU,QAAQ,CAACH,MAAM,CAAC;IAEtB,OAAOH,QAAQ,CAACK,IAAI;EACxB;EAEA,MAAauB,UAAUA,CAACpB,MAAc,EAAiB;IACnD,MAAMd,KAAK,CAACiC,MAAM,CAAC,GAAGhC,SAAS,CAACO,QAAQ,IAAIM,MAAM,EAAE,CAAC;IAErD,MAAML,MAAM,GAAGN,WAAW,CAAC+B,UAAU,CAACpB,MAAM,CAAC;IAC7CZ,KAAK,CAACU,QAAQ,CAACH,MAAM,CAAC;EAC1B;AACJ;AAEA,OAAO,MAAM0B,WAAW,GAAG,IAAI/B,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}