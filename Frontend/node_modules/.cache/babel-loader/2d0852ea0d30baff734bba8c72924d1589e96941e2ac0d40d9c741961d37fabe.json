{"ast":null,"code":"import axios from \"axios\";\nimport { appConfig } from \"../Utils/AppConfig\";\nimport { store } from \"../Redux/Store\";\nimport { boardActions } from \"../Redux/BoardSlice\";\nclass BoardService {\n  async getAllBoards() {\n    const response = await axios.get(appConfig.boardsUrl);\n    const boards = response.data;\n    const action = boardActions.initBoards(boards);\n    store.dispatch(action);\n    console.log(b);\n    return boards;\n  }\n  async getOneBoard(boardId) {\n    const response = await axios.get(appConfig.boardsUrl + boardId);\n    const boards = response.data;\n    // Don't need to update the entire boards array for a single board\n    return boards;\n  }\n  async getBoardsByWorkspace(workspaceId) {\n    const response = await axios.get(appConfig.getWorkspaceBoardsUrl(workspaceId));\n    const boards = response.data;\n    const action = boardActions.initBoards(boards);\n    store.dispatch(action);\n    return boards;\n  }\n  async addBoard(board) {\n    const response = await axios.post(appConfig.boardsUrl, board);\n    const dbBoard = response.data;\n    const action = boardActions.addBoard(dbBoard);\n    store.dispatch(action);\n    return dbBoard;\n  }\n  async updateBoard(board) {\n    const response = await axios.put(appConfig.boardsUrl + board._id, board);\n    const dbBoard = response.data;\n    const action = boardActions.updateBoard(dbBoard);\n    store.dispatch(action);\n    return dbBoard;\n  }\n  async deleteBoard(boardId) {\n    await axios.put(appConfig.boardsUrl + boardId);\n    const action = boardActions.deleteBoard(boardId);\n    store.dispatch(action);\n  }\n  async updateColumns(boardId, columns) {\n    const response = await axios.put(`${appConfig.boardsUrl}/${boardId}`, {\n      columns\n    });\n    const dbBoard = response.data;\n    const action = boardActions.updateBoardColumns({\n      boardId: boardId,\n      columns: dbBoard.columns\n    });\n    store.dispatch(action);\n    return dbBoard;\n  }\n}\nexport const boardService = new BoardService();","map":{"version":3,"names":["axios","appConfig","store","boardActions","BoardService","getAllBoards","response","get","boardsUrl","boards","data","action","initBoards","dispatch","console","log","b","getOneBoard","boardId","getBoardsByWorkspace","workspaceId","getWorkspaceBoardsUrl","addBoard","board","post","dbBoard","updateBoard","put","_id","deleteBoard","updateColumns","columns","updateBoardColumns","boardService"],"sources":["/Users/rutli/Desktop/PetProjects/Task Manager/Frontend/src/Services/BoardService.ts"],"sourcesContent":["import axios from \"axios\";\nimport { BoardModel } from \"../Models/BoardModel\";\nimport { appConfig } from \"../Utils/AppConfig\";\nimport { store } from \"../Redux/Store\";\nimport { boardActions } from \"../Redux/BoardSlice\";\n\nclass BoardService {\n\n    public async getAllBoards(): Promise<BoardModel[]> {\n        const response = await axios.get(appConfig.boardsUrl);\n        const boards = response.data;\n\n        const action = boardActions.initBoards(boards);\n        store.dispatch(action);\n        console.log(b)\n        return boards;\n    }\n\n    public async getOneBoard(boardId: string): Promise<BoardModel> {\n        const response = await axios.get(appConfig.boardsUrl + boardId);\n        const boards = response.data;\n        // Don't need to update the entire boards array for a single board\n        return boards;\n    }\n\n    public async getBoardsByWorkspace(workspaceId: string): Promise<BoardModel[]> {\n        const response = await axios.get(appConfig.getWorkspaceBoardsUrl(workspaceId));\n        const boards = response.data;\n        \n        const action = boardActions.initBoards(boards);\n        store.dispatch(action);\n\n        return boards;\n    }\n\n    public async addBoard(board: BoardModel): Promise<BoardModel> {\n        const response = await axios.post(appConfig.boardsUrl, board);\n        const dbBoard = response.data;\n\n        const action = boardActions.addBoard(dbBoard);\n        store.dispatch(action);\n\n        return dbBoard;\n    }\n\n    public async updateBoard(board: BoardModel): Promise<BoardModel> {\n        const response = await axios.put(appConfig.boardsUrl + board._id, board);\n        const dbBoard = response.data;\n\n        const action = boardActions.updateBoard(dbBoard);\n        store.dispatch(action);\n\n        return dbBoard;\n    }\n\n    public async deleteBoard(boardId: string): Promise<void> {\n        await axios.put(appConfig.boardsUrl + boardId);\n\n        const action = boardActions.deleteBoard(boardId);\n        store.dispatch(action);\n    }\n\n    public async updateColumns(boardId: string, columns: { name: string; order: number; }[]): Promise<BoardModel> {\n        const response = await axios.put(`${appConfig.boardsUrl}/${boardId}`, { columns });\n        const dbBoard = response.data;\n        \n        const action = boardActions.updateBoardColumns({\n            boardId: boardId,\n            columns: dbBoard.columns\n        });\n        store.dispatch(action);\n\n        return dbBoard;\n    }\n\n}\n\nexport const boardService = new BoardService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}