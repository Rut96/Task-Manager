{"ast":null,"code":"// src/store/BoardSlice.ts\nimport { createSlice } from \"@reduxjs/toolkit\";\n// Init Boards\nexport function initBoards(currentState, action) {\n  return action.payload;\n}\n\n// Add Board\nexport function addBoard(currentState, action) {\n  const newState = [...currentState];\n  newState.push(action.payload);\n  return newState;\n}\n\n// Update Board\nexport function updateBoard(currentState, action) {\n  const newState = [...currentState];\n  const index = newState.findIndex(b => b._id === action.payload._id);\n  if (index !== -1) {\n    newState[index] = action.payload;\n  }\n  return newState;\n}\n\n// Delete Board\nexport function deleteBoard(currentState, action) {\n  const newState = [...currentState];\n  const index = newState.findIndex(b => b._id === action.payload);\n  if (index !== -1) {\n    newState.splice(index, 1);\n  }\n  return newState;\n}\n\n// Update Board Columns\nexport function updateBoardColumns(currentState, action) {\n  const newState = [...currentState];\n  const index = newState.findIndex(b => b._id === action.payload.boardId);\n  if (index !== -1) {\n    newState[index] = {\n      ...newState[index],\n      columns: action.payload.columns\n    };\n  }\n  return newState;\n}\n\n// Clear Boards\nexport function clearBoards(currentState, action) {\n  return [];\n}\nexport const boardSlice = createSlice({\n  name: \"boards\",\n  initialState: [],\n  reducers: {\n    initBoards,\n    addBoard,\n    updateBoard,\n    deleteBoard,\n    updateBoardColumns,\n    clearBoards\n  }\n});\nexport const boardActions = boardSlice.actions;","map":{"version":3,"names":["createSlice","initBoards","currentState","action","payload","addBoard","newState","push","updateBoard","index","findIndex","b","_id","deleteBoard","splice","updateBoardColumns","boardId","columns","clearBoards","boardSlice","name","initialState","reducers","boardActions","actions"],"sources":["/Users/rutli/Desktop/PetProjects/Task Manager/Frontend/src/Redux/BoardSlice.ts"],"sourcesContent":["// src/store/BoardSlice.ts\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { BoardModel, Column } from \"../Models/BoardModel\";\n\n// Init Boards\nexport function initBoards(currentState: BoardModel[], action: PayloadAction<BoardModel[]>): BoardModel[] {\n    return action.payload;\n}\n\n// Add Board\nexport function addBoard(currentState: BoardModel[], action: PayloadAction<BoardModel>): BoardModel[] {\n    const newState = [...currentState];\n    newState.push(action.payload);\n    return newState;\n}\n\n// Update Board\nexport function updateBoard(currentState: BoardModel[], action: PayloadAction<BoardModel>): BoardModel[] {\n    const newState = [...currentState];\n    const index = newState.findIndex(b => b._id === action.payload._id);\n    if (index !== -1) {\n        newState[index] = action.payload;\n    }\n    return newState;\n}\n\n// Delete Board\nexport function deleteBoard(currentState: BoardModel[], action: PayloadAction<string>): BoardModel[] {\n    const newState = [...currentState];\n    const index = newState.findIndex(b => b._id === action.payload);\n    if (index !== -1) {\n        newState.splice(index, 1);\n    }\n    return newState;\n}\n\n// Update Board Columns\nexport function updateBoardColumns(\n    currentState: BoardModel[], \n    action: PayloadAction<{ boardId: string; columns: Column[] }>  \n): BoardModel[] {\n    const newState = [...currentState];\n    const index = newState.findIndex(b => b._id === action.payload.boardId);\n    if (index !== -1) {\n        newState[index] = {\n            ...newState[index],\n            columns: action.payload.columns\n        };\n    }\n    return newState;\n}\n\n// Clear Boards\nexport function clearBoards(currentState: BoardModel[], action: PayloadAction): BoardModel[] {\n    return [];\n}\n\nexport const boardSlice = createSlice({\n    name: \"boards\",\n    initialState: [],\n    reducers: { \n        initBoards, \n        addBoard, \n        updateBoard, \n        deleteBoard, \n        updateBoardColumns, \n        clearBoards \n    }\n});\n\nexport const boardActions = boardSlice.actions;"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAG7D;AACA,OAAO,SAASC,UAAUA,CAACC,YAA0B,EAAEC,MAAmC,EAAgB;EACtG,OAAOA,MAAM,CAACC,OAAO;AACzB;;AAEA;AACA,OAAO,SAASC,QAAQA,CAACH,YAA0B,EAAEC,MAAiC,EAAgB;EAClG,MAAMG,QAAQ,GAAG,CAAC,GAAGJ,YAAY,CAAC;EAClCI,QAAQ,CAACC,IAAI,CAACJ,MAAM,CAACC,OAAO,CAAC;EAC7B,OAAOE,QAAQ;AACnB;;AAEA;AACA,OAAO,SAASE,WAAWA,CAACN,YAA0B,EAAEC,MAAiC,EAAgB;EACrG,MAAMG,QAAQ,GAAG,CAAC,GAAGJ,YAAY,CAAC;EAClC,MAAMO,KAAK,GAAGH,QAAQ,CAACI,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKT,MAAM,CAACC,OAAO,CAACQ,GAAG,CAAC;EACnE,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;IACdH,QAAQ,CAACG,KAAK,CAAC,GAAGN,MAAM,CAACC,OAAO;EACpC;EACA,OAAOE,QAAQ;AACnB;;AAEA;AACA,OAAO,SAASO,WAAWA,CAACX,YAA0B,EAAEC,MAA6B,EAAgB;EACjG,MAAMG,QAAQ,GAAG,CAAC,GAAGJ,YAAY,CAAC;EAClC,MAAMO,KAAK,GAAGH,QAAQ,CAACI,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKT,MAAM,CAACC,OAAO,CAAC;EAC/D,IAAIK,KAAK,KAAK,CAAC,CAAC,EAAE;IACdH,QAAQ,CAACQ,MAAM,CAACL,KAAK,EAAE,CAAC,CAAC;EAC7B;EACA,OAAOH,QAAQ;AACnB;;AAEA;AACA,OAAO,SAASS,kBAAkBA,CAC9Bb,YAA0B,EAC1BC,MAA6D,EACjD;EACZ,MAAMG,QAAQ,GAAG,CAAC,GAAGJ,YAAY,CAAC;EAClC,MAAMO,KAAK,GAAGH,QAAQ,CAACI,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKT,MAAM,CAACC,OAAO,CAACY,OAAO,CAAC;EACvE,IAAIP,KAAK,KAAK,CAAC,CAAC,EAAE;IACdH,QAAQ,CAACG,KAAK,CAAC,GAAG;MACd,GAAGH,QAAQ,CAACG,KAAK,CAAC;MAClBQ,OAAO,EAAEd,MAAM,CAACC,OAAO,CAACa;IAC5B,CAAC;EACL;EACA,OAAOX,QAAQ;AACnB;;AAEA;AACA,OAAO,SAASY,WAAWA,CAAChB,YAA0B,EAAEC,MAAqB,EAAgB;EACzF,OAAO,EAAE;AACb;AAEA,OAAO,MAAMgB,UAAU,GAAGnB,WAAW,CAAC;EAClCoB,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE;IACNrB,UAAU;IACVI,QAAQ;IACRG,WAAW;IACXK,WAAW;IACXE,kBAAkB;IAClBG;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMK,YAAY,GAAGJ,UAAU,CAACK,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}